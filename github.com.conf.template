# Proxy git's smart http protocol to only certain organisations on github.com.
#
# https://git-scm.com/docs/http-protocol
#
# The git http protocol design makes it non-trivial to distinguish between push
# and pull - they are identical in terms of http verb and path.
# 
# We are keen to block push, but in practice we still need so support it for
# now. We may be able to limit it by restricting the client_max_body_size to
# very small size in future.


server {

    server_name github-proxy.opensafely.org;
    root /var/www/html/;
    listen ${PORT};

    # The default nginx request body size is 1M, we make it explicit and bump
    # to support current use case of publishing results to github
    client_max_body_size 128M;

    # no buffering
    proxy_buffering off;
    proxy_request_buffering off;
    chunked_transfer_encoding on;

    # We need a resolver configured so we can dynamically look up domains when
    # redirecting. We make it an env var so that we can switch it out in prod
    # for the Digital Ocean resolver
    resolver ${RESOLVER};

    # only opensafely, opensafely-core, and opensafely-actions orgs can be accessed
    # location regex cannot match on query parameters

    # basic git operations
    location ~ ^/(${ORGS})/[^/]+/info/refs {
        if ($args !~ "service=git-(upload|receive)-pack") { return 404; }
        proxy_pass https://github.com;
        proxy_redirect default;
    }

    # basic git operations
    location ~ ^/(${ORGS})/[^/]+/git-(upload|receive)-pack {
        proxy_pass https://github.com;
        proxy_redirect default;
    }

    # allow ssh keys to be retreived for a user
    location ~ ^/[^/]+\.keys {
        limit_except GET { deny all; }
        proxy_pass https://github.com;
        proxy_redirect default;
    }

    # allow release artifcats to be download from specific repo only
    location ~ ^/opensafely-core/backend-server/releases/download {
        limit_except GET { deny all; }
        proxy_pass https://github.com;
        proxy_redirect default;
        # releases download redirects to an S3 bucket, which is not accessible from
        # backends. So handle redirects to S3 here in the proxy rather than
        # passing back to the client
        proxy_intercept_errors on;
        error_page 301 302 307 = @handle_redirect;
    }

    location @handle_redirect {
        # set saves the initial response's Location: header
        set $redirect '$upstream_http_location';
        # proxy the AWS location back to the client
        proxy_pass $redirect;
    }

    location / {
        add_header 'Content-Type' 'text/plain; charset=UTF-8' always;
        return 403 'Only specific github organisations are supported by this proxy.';
    }
}
